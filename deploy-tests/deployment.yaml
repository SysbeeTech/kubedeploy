---
helmDefaults:
  atomic: true
  wait: true
  createNamespace: true

environments:
  default:
    values:
      - common-values.yaml
---
templates:
  default: &default
    namespace: deployment
    chart: ../{{ requiredEnv "CHART_NAME" }}
    installed: true
    valuesTemplate:
      - fullnameOverride: '{{`{{ .Release.Name }}`}}'
      - deploymentMode: Deployment
      - image:
          repository: nginx
          tag: latest

releases:
  # simple deployment testing
  - name: {{requiredEnv "RELEASE_NAME"}}
    labels:
      test: simple
    <<: *default

  # deployment with replicas
  - name: {{requiredEnv "RELEASE_NAME"}}-replicas
    labels:
      test: replicas
    <<: *default
    values:
      - replicaCount: 2
      - podAntiAffinity: "soft"
      - minReadySeconds: 30
      - topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: testing-replicas

  # deployment with autoscaling
  - name: {{requiredEnv "RELEASE_NAME"}}-autoscaling
    labels:
      test: autoscaling
    <<: *default
    values:
      - autoscaling:
          enabled: true
          minReplicas: 3
          maxReplicas: 5
          targetCPUUtilizationPercentage: 60
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300

  # deployment with init and additional containers
  - name: {{requiredEnv "RELEASE_NAME"}}-multi-container
    labels:
      test: multi-container
    <<: *default
    values:
      - additionalContainers:
          enabled: true
      - initContainers:
          enabled: true

  # deployment with extraObjects
  - name: {{requiredEnv "RELEASE_NAME"}}-extraobjects
    labels:
      test: extraobjects
    <<: *default
    values:
      - extraObjects:
          - apiVersion: v1
            kind: Secret
            metadata:
              name: secret-basic-auth
            type: kubernetes.io/basic-auth
            stringData:
              username: admin
              password: t0p-S3c43t

  # deployment with additional containers without healthcheck
  - name: {{requiredEnv "RELEASE_NAME"}}-nohc-additional
    labels:
      test: nohc-additional
    <<: *default
    values:
      - additionalContainers:
          enabled: true
          containers:
            - name: "busybox-nohc"
              repository: "busybox"
              tag: "latest"
              command: ["sh", "-c", "while true; do sleep 30; done;"]

  # deployment with configmaps and additional containers
  - name: {{requiredEnv "RELEASE_NAME"}}-configmaps
    labels:
      test: configmaps
    <<: *default
    values:
      - additionalContainers:
          enabled: true
          containers:
            - name: "busybox-custom"
              repository: busybox
              tag: "latest"
              command: ["sh", "-c", "while true; do sleep 30; done;"]
              ports:
                - name: http2
                  containerPort: 80
                  protocol: TCP
              healthcheck:
                enabled: true
                probes:
                  livenessProbe:
                    exec:
                      command:
                      - echo
                      - "alive"
                    initialDelaySeconds: 5
                    periodSeconds: 5
      - configMapHash: true
      - configMaps:
        - name: kubedeploy-configmap
          mount: true
          mountPath: /data/confmap
          data:
            kubedeploy: |+
              configmap values
        - name: kubedeploy2-configmap
          data:
            config: |+
              config2

  # deployment with envFrom configmaps and additional containers
  - name: {{requiredEnv "RELEASE_NAME"}}-envfrom
    labels:
      test: envfrom
    <<: *default
    values:
      - additionalContainers:
          enabled: true
      - initContainers:
          enabled: true
      - configMaps:
        - name: env-cfgmap
          data:
            ENV_VAR1: "value1"
            ENV_VAR2: "value2"
      - envFrom:
        - configMapRef:
            name: {{requiredEnv "RELEASE_NAME"}}-envfrom-env-cfgmap
